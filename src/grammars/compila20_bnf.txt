PROGRAM -> "program" NAME "begin" decl_list "end"

decl_list -> E | DECL more_decl 

more_decl -> E | more_decl ";" DECL

DECL -> VAR_DECL | PROC_DECL | REC_DECL	

VAR_DECL -> "var" NAME ":" TYPE pos_exp | "var" NAME ":=" EXP

pos_exp -> E | ":=" EXP

PROC_DECL -> "procedure" NAME "(" pos_paramfielddecl ")" pos_type "begin" pos_decl STMT_LIST "end"

pos_paramfielddecl -> E | PARAMFIELD_DECL more_paramfield_decl 

more_paramfield_decl -> E | more_paramfield_decl "," PARAMFIELD_DECL

REC_DECL -> "struct" NAME "{" pos_paramfielddecl "}"

PARAMFIELD_DECL -> NAME ":" TYPE

STMT_LIST -> pos_stmt

pos_stmt -> e | STMT more_stmt

more_stmt -> E | more_stmt ";" STMT

EXP -> EXP LOG_OP EXP 
	| "not" EXP
	| EXP REL_OP EXP
	| EXP ARITH_OP EXP
	| LITERAL
	| CALL_STMT
	| "new" NAME
	| VAR
	| REF_VAR
	| DEREF_VAR
	| "(" EXP ")"

REF_VAR ->"ref" "(" VAR ")"

DEREF_VAR -> "deref" "(" VAR ")" | "deref" "(" DEREF_VAR ")"

VAR -> NAME | EXP "." NAME

LOG_OP -> "&&" | "||"

REL_OP -> "<" | "<=" | ">" | ">=" | "=" | "<>" 

ARITH_OP -> "+" | "-" | "*" | "/" | "^"

LITERAL -> FLOAT_LITERAL | INT_LITERAL | STRING_LITERAL | BOOL_LITERAL | "null"

BOOL_LITERAL -> "true" | "false" 

STMT -> ASSIGN_STMT 
	| IF_STMT
	| WHILE_STMT
	| RETURN_STMT
	| CALL_STMT

ASSIGN_STMT -> VAR ":=" EXP | DEREF_VAR ":=" EXP

IF_STMT -> "if" EXP "then" statement_list op_else "fi"

statement_list -> E | statement_list STMT_LIST

op_else -> E | "else" statement_list

WHILE_STMT -> "while" EXP "do" statement_list "od"

RETURN_STMT -> "return" op_exp

op_exp -> E | EXP

CALL_STMT -> NAME "(" op_exp_list ")" 

op_exp_list -> E | EXP more_exp 

more_exp -> E | more_exp "," EXP

TYPE ->	"float" | "int" | "string" | "bool" | NAME | "ref" "(" TYPE ")"

   